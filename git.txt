commit -----> version of file or group of files
repository ----> group of file or files with its versions 

git init -----> to convert directory to repo (making .git)
git init + directory_name ----> making a directory and converting it to git repo (making .git)
git config user.name 'user_name' ----> we can use --global to set cconfiguration for all repos for the user , --system for all users for the system
git config --global user.name "Your name here"
git config user.email 'user_email' -----> usig this command without argument print its value
git config --global user.email "your_email@example.com"
git config --global color.ui true
git config --global core.editor "code --wait" for Visual Studio Code
git config core.editor notepad  for notepad
git config --global credential.helper store   for storing username and passowrd
git help + command_name ------->like man 

-------------------------------------------------------------------------------------------------------
(untracked,unmodified, modified, staged(to be committed))
untracked file ----> new file doesn't exist yet in the git cycle(has no commits yet)
unmodified file ---> file in git cycle but its version in working tree is the same as its version in the git repo
modified file ----> its version in working tree is different from its version in the git repo
staged file ----> file in stage area (to be committed later)
--------------------------------------------------------------------------------------------------------

git status ----> show status of all stages(working tree, staging area and git repo) or we can attach file name to print status for certain file

git clone + url -----> to clone a repository to computer
git log -----> print subject and body of repository commits
git checkout +id ------> this commit become first , -f for discard changes in working directory and staging area and switch to this commit
 
git add + file------> add one file to staging area
git reset + file -----> remove file from staging area
git commit -----> add content of staging area to new commit in repo , -a to commit files without using add  

git remote ----> show remotes
git remote add origin (remote name) + url ------> connect local repo to remote
git remote -v -----> check if remote is created successfully for this url or checking for cloning successfully
git push origin + branch -----> push commits of a branch to github
git pull origin + branch -----> pull branch from remote to local repo 

.gitignore -----> is a file to ignore files from tracking

draft/*.pdf to ignore all pdf files
or draft
!draft/*.pdf to ignore all files except pdf files

git diff -----> get the recent differences
git diff -- file_name ---> get the recent differences for certain file
git diff commit_id -- file_name ---> get differences between certain commit and working directory of certain file
git diff --staged ----> get differences between staging area and recent commit in repo
git diff older_commit_id newer_commit_id ----> get differences between certain commit and another commit

git branch ----> show branches
git branch + branch_name ------> create new branch
git branch + name + id ------> create branch points to certain id
git checkout branch_name ----->convert to this branch
git checkout -b branch_name -----> make new branch and switch to it 
git branch -d branch_name ----> delete the branch /*capital D to force deleting however the commits of branch we don't merge*/

git merge branch_name ---> when we are at master the branch will be merged to the master (fast forward)
when conflict is occured edit that file to solve conflicts ,git add then git commit to resolve conflict 

fast forward merge ------> 2 commits in the same line(2 different branches without any branches between them) so merging them is considered 
labeling the recent one
1--->2--->3--->4--->5--->6
     |                   |
   master  ------>   2nd_branch
                         |
                       master
merging will be fast forward

3-way merge: merging 2 separated branches to one of them (that we are at) by creating new commit and label it with the branch which we at currently 

-- for complete option or - for first charcter of the option
